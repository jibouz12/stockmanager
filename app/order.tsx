import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  RefreshControl,
  Image,
  TextInput,
} from 'react-native';
import { useRouter, useFocusEffect } from 'expo-router';
import { Chrome as Home, ShoppingCart, Plus, Minus, Package, X, CreditCard as Edit3, Trash2, RotateCcw, Eye } from 'lucide-react-native';
import { OrderItem, Product } from '@/types/Product';
import { StockService } from '@/services/StockService';
import { OrderService } from '@/services/OrderService';

// Composant séparé pour chaque item de commande
function OrderItemComponent({ 
  item, 
  onUpdateQuantity, 
  onRemoveItem,
  isAutoGenerated = false
}: { 
  item: OrderItem;
  onUpdateQuantity: (itemId: string, newQuantity: number) => void;
  onRemoveItem: (itemId: string) => void;
  isAutoGenerated?: boolean;
}) {
  const [stockQuantity, setStockQuantity] = useState<number>(0);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [tempQuantity, setTempQuantity] = useState<string>(item.quantity.toString());

  useEffect(() => {
    const getStockQuantity = async () => {
      if (!item.barcode) {
        setStockQuantity(0);
        return;
      }
      
      try {
        const products = await StockService.getAllProducts();
        const product = products.find(p => p.barcode === item.barcode);
        setStockQuantity(product ? product.quantity : 0);
      } catch (error) {
        setStockQuantity(0);
      }
    };

    getStockQuantity();
  }, [item.barcode]);

  const handleQuantityChange = (delta: number) => {
    const newQuantity = Math.max(1, item.quantity + delta);
    onUpdateQuantity(item.id, newQuantity);
  };

  const handleEditQuantity = () => {
    setTempQuantity(item.quantity.toString());
    setIsEditing(true);
  };

  const handleSaveQuantity = () => {
    const newQuantity = Math.max(1, parseInt(tempQuantity) || 1);
    onUpdateQuantity(item.id, newQuantity);
    setIsEditing(false);
  };

  const handleCancelEdit = () => {
    setTempQuantity(item.quantity.toString());
    setIsEditing(false);
  };

  const getStockStatusColor = () => {
    if (stockQuantity === 0) return '#EF4444'; // Rouge pour rupture
    if (stockQuantity <= 5) return '#F59E0B'; // Orange pour stock bas
    return '#10B981'; // Vert pour stock normal
  };

  const getStockStatusText = () => {
    if (stockQuantity === 0) return 'Stock';
    if (stockQuantity <= 5) return 'Stock';
    return 'Stock';
  };

  return (
    <View style={[
      styles.orderItem,
      isAutoGenerated && styles.autoGeneratedItem
    ]}>

      <View style={styles.itemImageContainer}>
        {item.imageUrl ? (
          <Image source={{ uri: item.imageUrl }} style={styles.itemImage} />
        ) : (
          <View style={styles.placeholderImage}>
            <Package color="#6B7280" size={24} />
          </View>
        )}
      </View>

      <View style={styles.itemInfo}>
        <Text style={styles.itemName} numberOfLines={2}>
          {item.name}
        </Text>
        {item.brand && (
          <Text style={styles.itemBrand} numberOfLines={1}>
            {item.brand}
          </Text>
        )}
        <View style={styles.itemDetails}>
          <Text style={[styles.stockInfo, { color: getStockStatusColor() }]}>
            {getStockStatusText()}: {stockQuantity}
          </Text>
          {isAutoGenerated && (
            <Text style={styles.autoGeneratedLabel}>
              AUTO
            </Text>
          )}
        </View>
      </View>
      
      <View style={styles.itemActions}>
        {/* Gestion de la quantité */}
        <View style={styles.quantitySection}>
          {isEditing ? (
            <View style={styles.editQuantityContainer}>
              <TextInput
                style={styles.quantityEditInput}
                value={tempQuantity}
                onChangeText={setTempQuantity}
                keyboardType="numeric"
                selectTextOnFocus
                autoFocus
              />
              <View style={styles.editActions}>
                <TouchableOpacity
                  style={styles.editActionButton}
                  onPress={handleSaveQuantity}
                >
                  <Text style={styles.editActionText}>✓</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.editActionButton, styles.cancelButton]}
                  onPress={handleCancelEdit}
                >
                  <Text style={styles.editActionText}>✕</Text>
                </TouchableOpacity>
              </View>
            </View>
          ) : (
            <View style={styles.quantityContainer}>
              <TouchableOpacity
                style={styles.quantityButton}
                onPress={() => handleQuantityChange(-1)}
              >
                <Minus color="#EF4444" size={16} />
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.quantityDisplay}
                onPress={handleEditQuantity}
              >
                <Text style={styles.quantityText}>{item.quantity}</Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.quantityButton}
                onPress={() => handleQuantityChange(1)}
              >
                <Plus color="#10B981" size={16} />
              </TouchableOpacity>
            </View>
          )}
        </View>
        
        {/* Bouton de suppression */}
        <TouchableOpacity
          style={styles.removeButton}
          onPress={() => onRemoveItem(item.id)}
        >
          <Trash2 color="#EF4444" size={18} />
        </TouchableOpacity>
      </View>
    </View>
  );
}

// Composant pour les articles masqués
function HiddenItemComponent({ 
  product, 
  onRestore 
}: { 
  product: Product;
  onRestore: (productId: string) => void;
}) {
  return (
    <View style={styles.hiddenItem}>
      <View style={styles.itemImageContainer}>
        {product.imageUrl ? (
          <Image source={{ uri: product.imageUrl }} style={styles.itemImage} />
        ) : (
          <View style={styles.placeholderImage}>
            <Package color="#6B7280" size={24} />
          </View>
        )}
      </View>

      <View style={styles.itemInfo}>
        <Text style={styles.itemName} numberOfLines={2}>
          {product.name}
        </Text>
        {product.brand && (
          <Text style={styles.itemBrand} numberOfLines={1}>
            {product.brand}
          </Text>
        )}
        <Text style={styles.hiddenLabel}>
          Suggestion masquée
        </Text>
      </View>
      
      <TouchableOpacity
        style={styles.restoreButton}
        onPress={() => onRestore(product.id)}
      >
        <RotateCcw color="#3B82F6" size={18} />
        <Text style={styles.restoreButtonText}>Restaurer</Text>
      </TouchableOpacity>
    </View>
  );
}

export default function OrderScreen() {
  const router = useRouter();
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);
  const [hiddenItems, setHiddenItems] = useState<Product[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [refreshing, setRefreshing] = useState<boolean>(false);
  const [showHidden, setShowHidden] = useState<boolean>(false);

  // Fonction pour charger les données
  const loadOrderItems = async () => {
    try {
      const items = await OrderService.getOrderItems();
      setOrderItems(items);
    } catch (error) {
      console.error('Erreur lors du chargement des commandes:', error);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const loadHiddenItems = async () => {
    try {
      const hidden = await OrderService.getHiddenAutoOrderItems();
      setHiddenItems(hidden);
    } catch (error) {
      console.error('Erreur lors du chargement des articles masqués:', error);
    }
  };

  // Charger les données au montage et quand l'écran reçoit le focus
  useEffect(() => {
    loadOrderItems();
    loadHiddenItems();
  }, []);

  // Recharger quand l'écran reçoit le focus (retour depuis add-product)
  useFocusEffect(
    React.useCallback(() => {
      loadOrderItems();
      loadHiddenItems();
    }, [])
  );

  // Écouter les événements de mise à jour en temps réel
  useEffect(() => {
    const handleOrderUpdate = (event: any) => {
      const { type, item } = event.detail;
      
      if (type === 'add') {
        // Ajouter immédiatement le nouvel article à la liste
        setOrderItems(prevItems => {
          // Vérifier si l'article n'existe pas déjà
          const exists = prevItems.some(existingItem => existingItem.id === item.id);
          if (!exists) {
            return [...prevItems, item];
          }
          return prevItems;
        });
      } else if (type === 'update') {
        // Mettre à jour un article existant
        setOrderItems(prevItems => 
          prevItems.map(existingItem => 
            existingItem.id === item.id ? item : existingItem
          )
        );
      } else if (type === 'remove') {
        // Supprimer un article
        setOrderItems(prevItems => 
          prevItems.filter(existingItem => existingItem.id !== item.id)
        );
      }
    };

    // Ajouter l'écouteur d'événement (uniquement sur web avec addEventListener disponible)
    if (typeof window !== 'undefined' && typeof window.addEventListener === 'function') {
      window.addEventListener('orderUpdated', handleOrderUpdate);
      
      // Nettoyer l'écouteur au démontage
      return () => {
        window.removeEventListener('orderUpdated', handleOrderUpdate);
      };
    }
  }, []);

  const handleRefresh = () => {
    setRefreshing(true);
    loadOrderItems();
    loadHiddenItems();
  };

  const handleUpdateQuantity = async (itemId: string, newQuantity: number) => {
    try {
      if (newQuantity <= 0) {
        await handleRemoveItem(itemId);
        return;
      }

      await OrderService.updateOrderItemQuantity(itemId, newQuantity);
      
      // Mettre à jour l'état local immédiatement
      setOrderItems(prevItems => 
        prevItems.map(item => 
          item.id === itemId 
            ? { ...item, quantity: newQuantity }
            : item
        )
      );
    } catch (error) {
      console.error('Erreur lors de la mise à jour:', error);
      Alert.alert('Erreur', 'Impossible de mettre à jour la quantité');
    }
  };

  const handleRemoveItem = async (itemId: string) => {
    const item = orderItems.find(i => i.id === itemId);
    if (!item) return;

    const isAutoGenerated = itemId.startsWith('auto_');
    const actionText = isAutoGenerated ? 'masquer cette suggestion' : 'supprimer cet article';
    const confirmText = isAutoGenerated ? 'Masquer' : 'Supprimer';

    Alert.alert(
      isAutoGenerated ? 'Masquer la suggestion' : 'Supprimer l\'article',
      `Êtes-vous sûr de vouloir ${actionText} "${item.name}" ?`,
      [
        { text: 'Annuler', style: 'cancel' },
        { 
          text: confirmText, 
          style: 'destructive',
          onPress: async () => {
            try {
              await OrderService.removeOrderItem(itemId);
              
              // Mettre à jour l'état local immédiatement
              setOrderItems(prevItems => 
                prevItems.filter(item => item.id !== itemId)
              );

              // Si c'est un article automatique, recharger les articles masqués
              if (isAutoGenerated) {
                loadHiddenItems();
              }
            } catch (error) {
              console.error('Erreur lors de la suppression:', error);
              Alert.alert('Erreur', 'Impossible de supprimer l\'article');
            }
          }
        }
      ]
    );
  };

  const handleRestoreItem = async (productId: string) => {
    try {
      await OrderService.restoreAutoOrderItem(productId);
      
      // Recharger les données
      loadOrderItems();
      loadHiddenItems();
      
      Alert.alert('Succès', 'Suggestion restaurée dans la commande');
    } catch (error) {
      console.error('Erreur lors de la restauration:', error);
      Alert.alert('Erreur', 'Impossible de restaurer la suggestion');
    }
  };

  // Séparer les articles manuels des articles auto-générés
  const manualItems = orderItems.filter(item => !item.id.startsWith('auto_'));
  const autoItems = orderItems.filter(item => item.id.startsWith('auto_'));

  const renderHeader = () => (
    <View style={styles.header}>
      <View style={styles.headerTop}>
        <TouchableOpacity 
          style={styles.homeButton}
          onPress={() => router.push('/(tabs)')}
        >
          <Home color="#111827" size={24} />
        </TouchableOpacity>
        <Text style={styles.title}>Commande</Text>
        <View style={styles.placeholder} />
      </View>
        {hiddenItems.length > 0 && (
          <TouchableOpacity 
            style={styles.statItem}
            onPress={() => setShowHidden(!showHidden)}
          >
            <Eye color="#F59E0B" size={20} />
            <Text style={styles.statText}>
              {hiddenItems.length} masqué{hiddenItems.length > 1 ? 's' : ''}
            </Text>
          </TouchableOpacity>
        )}
      </View>

      {/* Bouton Passer commande */}
      <View style={styles.actionButtonsContainer}>
        <TouchableOpacity 
          style={styles.actionButtonPrimary}
          onPress={() => router.push('/order-summary')}
        >
          <Text style={styles.actionButtonPrimaryText}>Passer commande</Text>
        </TouchableOpacity>
      </View>

      {/* Bannière "Ajouter produit" */}
      <TouchableOpacity 
        style={styles.addProductBanner}
        onPress={() => router.push('/add-product')}
      >
        <View style={styles.addProductBannerContent}>
          <Plus color="#FFFFFF" size={24} />
          <View style={styles.addProductBannerText}>
            <Text style={styles.addProductBannerTitle}>Ajouter produit</Text>
            <Text style={styles.addProductBannerSubtitle}>
              Rechercher ou créer un nouveau produit
            </Text>
          </View>
        </View>
      </TouchableOpacity>
    </View>
  );

  const renderSectionHeader = (title: string, count: number, description: string) => (
    <View style={styles.sectionHeader}>
      <Text style={styles.sectionTitle}>{title} ({count})</Text>
      <Text style={styles.sectionDescription}>{description}</Text>
    </View>
  );

  const renderOrderItem = ({ item }: { item: OrderItem }) => (
    <OrderItemComponent
      item={item}
      onUpdateQuantity={handleUpdateQuantity}
      onRemoveItem={handleRemoveItem}
      isAutoGenerated={item.id.startsWith('auto_')}
    />
  );

  const renderHiddenItem = ({ item }: { item: Product }) => (
    <HiddenItemComponent
      product={item}
      onRestore={handleRestoreItem}
    />
  );

  if (loading && !refreshing) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Chargement des commandes...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <FlatList
        data={[
          // Créer une structure de données pour les sections
          ...(autoItems.length > 0 ? [{ type: 'section', title: 'Suggestions automatiques', count: autoItems.length, description: 'Basées sur votre stock actuel (modifiables)' }] : []),
          ...autoItems.map(item => ({ type: 'item', data: item })),
          ...(manualItems.length > 0 ? [{ type: 'section', title: 'Articles ajoutés manuellement', count: manualItems.length, description: 'Produits que vous avez ajoutés' }] : []),
          ...manualItems.map(item => ({ type: 'item', data: item })),
          ...(showHidden && hiddenItems.length > 0 ? [{ type: 'section', title: 'Suggestions masquées', count: hiddenItems.length, description: 'Suggestions que vous avez masquées' }] : []),
          ...(showHidden ? hiddenItems.map(item => ({ type: 'hidden', data: item })) : [])
        ]}
        renderItem={({ item }) => {
          if (item.type === 'section') {
            return renderSectionHeader(item.title, item.count, item.description);
          }
          if (item.type === 'hidden') {
            return renderHiddenItem({ item: item.data });
          }
          return renderOrderItem({ item: item.data });
        }}
        keyExtractor={(item, index) => 
          item.type === 'section' ? `section-${index}` : 
          item.type === 'hidden' ? `hidden-${item.data.id}` :
          item.data.id
        }
        ListHeaderComponent={renderHeader}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
        }
        showsVerticalScrollIndicator={false}
        contentContainerStyle={orderItems.length === 0 && hiddenItems.length === 0 ? styles.emptyContainer : styles.listContainer}
        ListEmptyComponent={
          <View style={styles.emptyState}>
            <ShoppingCart color="#6B7280" size={64} />
            <Text style={styles.emptyTitle}>Aucune commande en cours</Text>
            <Text style={styles.emptyText}>
              Ajoutez des produits à commander en utilisant le bouton ci-dessus
            </Text>
          </View>
        }
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: '#6B7280',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingTop: 42,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    marginBottom: 8,
  },
  headerTop: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
  },
  homeButton: {
    padding: 8,
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: '#111827',
  },
  placeholder: {
    width: 40,
  },
  headerStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingVertical: 12,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#F3F4F6',
    marginBottom: 16,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statText: {
    marginLeft: 8,
    fontSize: 14,
    fontWeight: '500',
    color: '#374151',
  },
  actionButtonsContainer: {
    paddingHorizontal: 16,
    marginBottom: 16,
  },
  actionButtonPrimary: {
    backgroundColor: '#3B82F6',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  actionButtonPrimaryText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  addProductBanner: {
    marginHorizontal: 16,
    backgroundColor: '#10B981',
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  addProductBannerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
  },
  addProductBannerText: {
    marginLeft: 12,
    flex: 1,
  },
  addProductBannerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  addProductBannerSubtitle: {
    fontSize: 14,
    color: '#D1FAE5',
  },
  sectionHeader: {
    backgroundColor: '#F8FAFC',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
    marginTop: 8,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1E293B',
    marginBottom: 2,
  },
  sectionDescription: {
    fontSize: 12,
    color: '#64748B',
  },
  listContainer: {
    paddingBottom: 16,
  },
  emptyContainer: {
    flexGrow: 1,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#374151',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    lineHeight: 20,
  },
  orderItem: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginVertical: 4,
    padding: 16,
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
    position: 'relative',
  },
  autoGeneratedItem: {
    borderLeftWidth: 4,
    borderLeftColor: '#3B82F6',
    backgroundColor: '#FAFBFF',
  },
  autoGeneratedBadge: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: '#3B82F6',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    zIndex: 1,
  },
  autoGeneratedBadgeText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  hiddenItem: {
    backgroundColor: '#F8FAFC',
    marginHorizontal: 16,
    marginVertical: 4,
    padding: 16,
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E2E8F0',
    opacity: 0.7,
  },
  itemImageContainer: {
    marginRight: 12,
  },
  itemImage: {
    width: 60,
    height: 60,
    borderRadius: 8,
  },
  placeholderImage: {
    width: 60,
    height: 60,
    borderRadius: 8,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  itemInfo: {
    flex: 1,
    marginRight: 16,
  },
  itemName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 4,
  },
  itemBrand: {
    fontSize: 14,
    color: '#6B7280',
    marginBottom: 8,
  },
  itemDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  stockInfo: {
    fontSize: 12,
    fontWeight: '500',
  },
  autoGeneratedLabel: {
    fontSize: 10,
    color: '#3B82F6',
    fontWeight: '500',
    fontStyle: 'italic',
  },
  hiddenLabel: {
    fontSize: 12,
    color: '#F59E0B',
    fontWeight: '500',
    fontStyle: 'italic',
  },
  itemActions: {
    alignItems: 'center',
  },
  quantitySection: {
    marginBottom: 8,
  },
  quantityContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F3F4F6',
    borderRadius: 8,
  },
  quantityButton: {
    width: 32,
    height: 32,
    justifyContent: 'center',
    alignItems: 'center',
  },
  quantityDisplay: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    minWidth: 50,
    justifyContent: 'center',
  },
  quantityText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginRight: 4,
  },
  editQuantityContainer: {
    alignItems: 'center',
  },
  quantityEditInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#3B82F6',
    borderRadius: 6,
    paddingHorizontal: 8,
    paddingVertical: 4,
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
    minWidth: 50,
    marginBottom: 4,
  },
  editActions: {
    flexDirection: 'row',
  },
  editActionButton: {
    backgroundColor: '#10B981',
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 2,
  },
  cancelButton: {
    backgroundColor: '#EF4444',
  },
  editActionText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  removeButton: {
    padding: 8,
    backgroundColor: '#FEE2E2',
    borderRadius: 6,
  },
  restoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#EBF8FF',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#3B82F6',
  },
  restoreButtonText: {
    color: '#3B82F6',
    fontSize: 14,
    fontWeight: '500',
    marginLeft: 6,
  },
});